Javascript

REF: https://javascript.info/variables, 
w3school, 
https://www.tutorialspoint.com/javascript/index.htm
https://developer.mozilla.org/

Javascript is the most popular scripting language or programming language
JavaScript Can Change HTML Content
JavaScript files have the file extension .js


********************************************
JavaScript Where To
In HTML, JavaScript code is inserted between <script> and </script> tags.
  <script language = "javascript" type = "text/javascript"> 
             document.write("Hello World!")
console.log('Hello")

External JavaScript
<script src="myScript.js"></script>
External scripts cannot contain <script> tags.

You can place an external script reference in <head> or <body> as you like.
https://developers.google.com/web/updates/2016/08/removing-document-write

***************************************************
Why use External JavaScript
As a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files.

The benefit of a separate file is that the browser will download it and store it in its cache.

Other pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once.

That reduces traffic and makes pages faster.

***************************************************
JavaScript Can Change HTML Content
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = "Hello World";
</script> 

***************************************************
Comments
One-line comments start with two forward slash characters //
Multiline comments /* */

***************************************************
Variables
var is an old-school variable declaration
let is a modern variable declaration.
const is like let, but the value of the variable can’t be changed.

the variable declaration and assignment into a single line:
let message = 'Hello!';

Declare multiple variables in one line:
let user = 'John', age = 25, message = 'Hello';

We can also change it as many times as we want
let message;
message = 'Hello!';
message = 'World!'; // value changed
alert(message);

We can also declare two variables and copy data from one into the other
let hello = 'Hello world!';
let message;
// copy 'Hello world' from hello into message
message = hello;

// now two variables hold the same data
alert(hello); // Hello world!
alert(message); // Hello world!

A variable should be declared only once.
A repeated declaration of the same variable is an error
let message = "This";
// repeated 'let' leads to an error
let message = "That";  // SyntaxError: 'message' has already been declared

“var” has no block scope
if (true) {
  var test = true; // use "var" instead of "let"
}
alert(test); // true, the variable lives after if

if (true) {
  let test = true; // use "let"
}
alert(test); // Error: test is not defined

Variable naming
The name must contain only letters, digits, or the symbols $ and _.
The first character must not be a digit.
JavaScript variable names are case-sensitive. For example, Name and name are two different variables.
Variables named apple and AppLE are two different variables.

Reserved names
There is a list of reserved words, which cannot be used as variable names because they are used by the language itself.

For example: let, class, return, and function are reserved.

The code below gives a syntax error:

let let = 5; // can't name a variable "let", error!
let return = 5; // also can't name it "return", error!

An assignment without use strict
Normally, we need to define a variable before using it. But in the old times, it was technically possible to create a variable by a mere assignment of the value without using let. This still works now if we don’t put use strict in our scripts to maintain compatibility with old scripts.

num = 5; // the variable "num" is created if it didn't exist
alert(num); // 5
This is a bad practice and would cause an error in strict mode:

"use strict";
num = 5; // error: num is not defined

Constants
Means that a variable’s value never changes
const myBirthday = '18.04.1982';
myBirthday = '01.01.2001'; // error

Uppercase constants
 Constants are named using capital letters and underscores. constants can be declared with uppercase or lowercase.
example: 
const COLOR_ORANGE = "#FF7F00";
 easier to remember
 easier to mistype
much more meaningful 
capital-named constants are only used as aliases for “hard-coded” values.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const

Some good-to-follow rules are:
Use human-readable names like userName or shoppingCart.
Stay away from abbreviations or short names like a, b, c, unless you really know what you’re doing.
Make names maximally descriptive and concise. Examples of bad names are data and value.
If a site visitor is called a “user” then we should name related variables currentUser or newUser instead of currentVisitor or newManInTown.

https://www.w3schools.com/js/js_conventions.asp
https://developer.mozilla.org/en-US/docs/Web/JavaScript

**********************************************************

Data types
There are 8 basic data types in JavaScript.
Number
String
Boolean (logical type)
The “null” value
The “undefined” value
The typeof operator
Objects and Symbols
BigInt(10n)

Number
let n = 123;
n = 12.345;
special numeric values: Infinity, -Infinity and NaN.
example: alert( "not a number" / 2 ); // NaN, such division is erroneous
alert( 1 / 0 ); // Infinity
https://www.w3schools.com/jsref/jsref_infinity.asp#:~:text=Infinity%20is%20a%20numeric%20value,which%20is%201.797693134862315E%2B308.

String
let str = "Hello";
let str2 = 'Single quotes are ok too';
let phrase = `can embed another ${str}`; Template literals or string template

In JavaScript, there are 3 types of quotes.
Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello`.



Boolean (logical type)
The boolean type has only two values: true and false.
let isGreater = 4 > 1;
alert( isGreater ); // true (the comparison result is "yes")

The “null” value
It’s just a special value which represents “nothing”, “empty” or “value unknown”.

The “undefined” value
The meaning of undefined is “value is not assigned”(empty value).

Type of operator
typeof 0              // Returns "number"
typeof 314            // Returns "number"
typeof 3.14           // Returns "number"
typeof (3)            // Returns "number"
typeof (3 + 4)        // Returns "number"
typeof 10n // "bigint"
typeof null // "object" 

Difference Between Undefined and Null
undefined and null are equal in value but different in type:

typeof undefined           // undefined
typeof null                // object

null === undefined         // false
null == undefined          // true

Array
var cars = ["Saab", "Volvo", "BMW"];
Array indexes are zero-based, which means the first item is [0], second is [1], and so on.

Objects
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
person.age
person["age"]

***********************************************************
Interaction: alert, prompt, confirm
alert ( shows a message )
alert("Hello");

prompt ( shows a message asking the user to input text )
result = prompt(title, [default]);
title( The text to show the visitor. )
default ( An optional second parameter, the initial value for the input field. )

confirm ( shows a message and waits for the user to press “OK” or “Cancel”. It returns true for OK and false for Cancel/Esc. )
result = confirm(question);

let isBoss = confirm("Are you the boss?");
alert( isBoss ); // true if OK is pressed

**************************************************************


Opreators
https://javascript.info/operators
https://www.w3schools.com/js/js_operators.asp

JavaScript Arithmetic Operators
Addition +,
Subtraction -,
Multiplication *,
Exponentiation **.
Division /,
Modulus(Division Remainder) %,
++	Increment
--	Decrement

JavaScript Assignment Operators
=	
+=
-=
*=
/=
%=
**=	 

JavaScript String Operators
let text3 = text1 + " " + text2;
let y = "5" + 5;
let z = "Hello" + 5;

+=
let text1 = "What a very ";
text1 += "nice day";


JavaScript Comparison Operators
https://www.w3schools.com/js/js_comparisons.asp
==	equal to
===	equal value and equal type
!=	not equal
!==	not equal value or not equal type
>	greater than
<	less than
>=	greater than or equal to
<=	less than or equal to
?	ternary operator

****************************************************************

JavaScript Logical Operators
&&	and	(x < 10 && y > 1) is true	
||	or	(x == 5 || y == 5) is false	
!	not	!(x == y) is true
https://www.w3schools.com/js/js_comparisons.asp

****************************************************************
Conditional Statements
if
else if
else

switch

if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}

Switch
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

****************************************************************
for loop
for (statement 1; statement 2; statement 3) {
  // code block to be executed
}

Statement 1 is executed (one time) before the execution of the code block.
Statement 2 defines the condition for executing the code block.
Statement 3 is executed (every time) after the code block has been executed.

Example:
for (i = 0; i < 5; i++) {
  text += "The number is " + i + "<br>";
}

The For/In Loop
The JavaScript for/in statement loops through the properties of an object:

The For/Of Loop
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of
Loop over array
var cars = ['BMW', 'Volvo', 'Mini'];
var x;

for (x of cars) {
  document.write(x + "<br >");
}

Loop over string
var txt = 'JavaScript';
var x;
for (x of txt) {
  document.write(x + "<br >");
}

While loop
var text = "";
var i = 0;
while (i < 10) {
  text += "<br>The number is " + i;
  i++;
}
document.getElementById("demo").innerHTML = text;

Do While loop
var text = ""
var i = 0;

do {
  text += "<br>The number is " + i;
  i++;
}
while (i < 10);  

document.getElementById("demo").innerHTML = text;
</script>

****************************************************************
JavaScript Break and Continue (Loop Control)
The break statement "jumps out" of a loop.
The continue statement "jumps over" one iteration in the loop.

Break
for (i = 0; i < 10; i++) {
  if (i === 3) { break; }
  text += "The number is " + i + "<br>";
}

Continue 
for (i = 0; i < 10; i++) {
  if (i === 3) { continue; }
  text += "The number is " + i + "<br>";
}

JavaScript Labels ( a label name and a colon: )
labelname:
break labelname;
continue labelname;

Example:
var cars = ["BMW", "Volvo", "Saab", "Ford"];
var text = "";
list: {
  text += cars[0] + "<br>"; 
  text += cars[1] + "<br>"; 
  break list;
  text += cars[2] + "<br>"; 
  text += cars[3] + "<br>"; 
}
document.getElementById("demo").innerHTML = text;

*******************************************************************
JavaScript Errors
https://www.w3schools.com/js/js_errors.asp
https://www.w3schools.com/jsref/jsref_obj_error.asp

JavaScript try and catch
try {
  alert('Welcome');
  addalert("Welcome guest!"); // for error
}
catch(err) {
  document.getElementById("demo").innerHTML = err.message;
}

Error Object Properties
name
message

Error Name Values
ReferenceError - An illegal reference has occurred
SyntaxError -	A syntax error has occurred
TypeError - A type error has occurred


*******************************************************************